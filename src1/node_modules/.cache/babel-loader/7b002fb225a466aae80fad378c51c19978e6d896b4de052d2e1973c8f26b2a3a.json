{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useQuiz = () => {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [answers, setAnswers] = useState({});\n  const [timeLeft, setTimeLeft] = useState(3600);\n  useEffect(() => {\n    // Timer logic\n    const timer = setInterval(() => {\n      setTimeLeft(prev => Math.max(0, prev - 1));\n    }, 1000);\n    return () => clearInterval(timer);\n  }, []);\n  const handleAnswer = (questionId, answer) => {\n    setAnswers(prev => ({\n      ...prev,\n      [questionId]: answer\n    }));\n  };\n  const submitQuiz = async () => {\n    try {\n      const response = await fetch('/api/submit-quiz', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          answers\n        })\n      });\n      return await response.json();\n    } catch (error) {\n      console.error('Error submitting quiz:', error);\n      throw error;\n    }\n  };\n  return {\n    questions,\n    answers,\n    timeLeft,\n    handleAnswer,\n    submitQuiz\n  };\n};\n_s(useQuiz, \"LHg5qjCDp/xfkGU+fmavfycuuSg=\");","map":{"version":3,"names":["useState","useEffect","useQuiz","_s","questions","setQuestions","answers","setAnswers","timeLeft","setTimeLeft","timer","setInterval","prev","Math","max","clearInterval","handleAnswer","questionId","answer","submitQuiz","response","fetch","method","headers","body","JSON","stringify","json","error","console"],"sources":["D:/MCQ_Gen/frontend/src1/src/hooks/useQuiz.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport const useQuiz = () => {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [answers, setAnswers] = useState({});\r\n  const [timeLeft, setTimeLeft] = useState(3600);\r\n\r\n  useEffect(() => {\r\n    // Timer logic\r\n    const timer = setInterval(() => {\r\n      setTimeLeft(prev => Math.max(0, prev - 1));\r\n    }, 1000);\r\n\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const handleAnswer = (questionId, answer) => {\r\n    setAnswers(prev => ({\r\n      ...prev,\r\n      [questionId]: answer\r\n    }));\r\n  };\r\n\r\n  const submitQuiz = async () => {\r\n    try {\r\n      const response = await fetch('/api/submit-quiz', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ answers })\r\n      });\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('Error submitting quiz:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  return {\r\n    questions,\r\n    answers,\r\n    timeLeft,\r\n    handleAnswer,\r\n    submitQuiz\r\n  };\r\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACM,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACQ,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,KAAK,GAAGC,WAAW,CAAC,MAAM;MAC9BF,WAAW,CAACG,IAAI,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,IAAI,GAAG,CAAC,CAAC,CAAC;IAC5C,CAAC,EAAE,IAAI,CAAC;IAER,OAAO,MAAMG,aAAa,CAACL,KAAK,CAAC;EACnC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,YAAY,GAAGA,CAACC,UAAU,EAAEC,MAAM,KAAK;IAC3CX,UAAU,CAACK,IAAI,KAAK;MAClB,GAAGA,IAAI;MACP,CAACK,UAAU,GAAGC;IAChB,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kBAAkB,EAAE;QAC/CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEpB;QAAQ,CAAC;MAClC,CAAC,CAAC;MACF,OAAO,MAAMc,QAAQ,CAACO,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACb;EACF,CAAC;EAED,OAAO;IACLxB,SAAS;IACTE,OAAO;IACPE,QAAQ;IACRQ,YAAY;IACZG;EACF,CAAC;AACH,CAAC;AAAChB,EAAA,CA5CWD,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}